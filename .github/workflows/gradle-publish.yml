# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    main:
      - main
  pull_request:
    branches:
      - main
      - release
      - develop
    types: [opened,reopened]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: read
      packages: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle
        run: ./gradlew build
      
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/linux@v2
        if: always()
        with:
          files: |
            build/test-results/**/*.xml
            build/test-results/**/*.trx
            build/test-results/**/*.json

      - name: Send Test Result to Slack Publish Channel
        run: |
          ls ./build/test-results/**/*.xml | xargs cat >> test_result.xml
          ls -al
          cat ./test_result.xml
          grep testsuite test_result.xml > temp_test_result.xml
          mv temp_test_result.xml test_result.xml
          grep -o 'tests="[0-9]\+"' test_result.xml >> slack_message
          grep -o 'skipped="[0-9]\+"' test_result.xml >> slack_message
          grep -o 'failures="[0-9]\+"' test_result.xml >> slack_message
          grep -o 'errors="[0-9]\+"' test_result.xml >> slack_message
          grep -o 'time="[0-9]\+.[0-9]\+' test_result.xml >> slack_message
          curl -X POST -H 'Content-type: application/json' --data "{\"text\": \"$(cat slack_message | sed "s/\"/'/g")\"}" ${{secrets.SLACK_WEBHOOK_URL}}

  publish_docker_file:
    needs: build_and_test
    runs-on: ubuntu-latest
    env:
      DOCKER_HUB_GROUP_NAME: jonathan434
      DOCKER_HUB_IMAGE_NAME: share_living
      DOCKER_HUB_IMAGE_TEST_TAG: test
    
    steps:
      - name: Publish to Docker Hub
        run: |
          ls -al
          pwd
          echo ${{secrets.DOCKER_HUB_PASSWORD}} | docker login -u ${{secrets.DOCKER_HUB_USER_NAME}} --password-stdin 
          docker build -t "$DOCKER_HUB_GROUP_NAME/$DOCKER_HUB_IMAGE_NAME:$DOCKER_HUB_IMAGE_NAME" .
          docker push "$DOCKER_HUB_GROUP_NAME/$DOCKER_HUB_IMAGE_NAME:$DOCKER_HUB_IMAGE_TEST_TAG" 

  publish_share_living_test_server:
    needs: [build_and_test, publish_docker_file]
    runs-on: ubuntu-latest
    env: 
      AWS_ASIA_PEM: ${{secrets.AWS_ASIA_PEM}}
      AWS_EC2_DOMAIN: ${{secrets.AWS_EC2_DOMAIN}}
      DOCKER_HUB_GROUP_NAME: jonathan434
      DOCKER_HUB_IMAGE_NAME: share_living
      DOCKER_HUB_IMAGE_TEST_TAG: test

    steps:
      - name: Save Secrets to .pem file
        run: |
          touch aws_asia.pem
          echo $AWS_ASIA_PEM > aws_asia.pem
      - name: Get Docker Image from Docker Hub
        run: |
          ssh -i aws_asia.pem $AWS_EC2_DOMAIN
          docker pull "$DOCKER_HUB_GROUP_NAME/$DOCKER_HUB_IMAGE_NAME:$DOCKER_HUB_IMAGE_TEST_TAG"
      - name: Make Container for share_living Server
        run: |
          docker run --rm --name share_living_test_server -p 80:80 "$DOCKER_HUB_GROUP_NAME/$DOCKER_HUB_IMAGE_NAME:$DOCKER_HUB_IMAGE_TEST_TAG"
